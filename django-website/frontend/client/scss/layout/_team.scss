// Team layout
// -----------

.team {
  margin: 11.089rem auto 0;
  max-width: 75.999rem;

  @media #{$small-landscape} {
    margin: 6.854rem auto 0;
  }
}

// [1] Add a negative margin left to make up for the children's one. This way
//     the left is zeroed.
.team-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  margin-left: -1.618rem; // [1]
  padding: 0 4.236rem;

  @media (max-width: $max-small) {
    margin-left: 0;
    padding: 0;
  }

  @media (max-width: $max-xsmall) {
    padding: 0 0.618rem;
  }
}

// [1] Set three pictures per row, with a space between of 1.618rem.
// [2] We use Flexbox to handle the wrapping behavior, so we have no control on
//     wrapped item's margins. The workaround we use is to set a left margins
//     value to all items, and make up for them by setting a negative
//     margin-left to their parent container.
.teammate,
.teammate_hiring {
  margin-top: 6.854rem;
  margin-left: 1.618rem; // [2]
  position: relative;
  width: calc(33.33% - 1.618rem); // [1]

  @media (max-width: $max-medium) {
    width: calc(50% - 4.236%); // [1]
  }

  @media (max-width: $max-small) {
    margin-left: 0;
  }

  @media (max-width: $max-xsmall) {
    width: 100%;
  }

  // Select every 3th item starting from the 2nd one.
  &:nth-child(3n + 2) {
    @media (min-width: $min-medium) {
      top: 2.618rem;
    }
  }

  &.is-shifted_down {
    @media (min-width: $min-medium) {
      top: 2.618rem;
    }
  }
}

// [1] Make square containers
.teammate-figure {
  background-color: darken($white, 6%);
  height: 0; // [1]
  opacity: 0;
  padding-bottom: 100%; // [1]
  position: relative;
  transition: opacity 0.618s ease-out;

  // Add a background to the picture keeping the teammate's drop shadow visible.
  &::before {
    bottom: 0;
    content: "";
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
  }

  // Create a div which overlaps the image
  &::after {
    background-color: $black;
    bottom: 0;
    content: "";
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    transition: transform 0.382s ease-out 0.382s;

    @media (max-width: $max-xsmall) {
      transition-delay: 0;
    }
  }
}

.teammate.is-element_revealed > .teammate-figure {
  opacity: 1;

  &::after {
    transform: scale3d(1, 0, 1);
    transform-origin: top;
  }
}

// Invert the transition origin for every middle element of the row.
.teammate:nth-child(3n + 2) > .teammate-figure::after {
  @media (min-width: $min-medium) {
    transform-origin: bottom;
  }
}

// Add a shadow behind the teammate silhouette
.teammate-figure-picture {
  bottom: 0;
  filter: drop-shadow(0 10px 16px rgba(0, 0, 0, 0.5));
  height: 100%;
  left: 50%;
  position: absolute;
  transform: translateX(-50%);
  width: auto;
}

.teammate-info {
  margin-top: 1.618rem;
  text-align: center;
}

.teammate.is-element_revealed > .teammate-info {
  opacity: 1;
  transform: translateZ(0);
}

.teammate-info-name {
  font-size: 1rem;
}

.teammate-info-role {
  color: $light-grey;
  margin-top: 0.326rem;
}

.teammate-social {
  display: flex;
  justify-content: center;
  margin-top: 1.618rem;

  & > * + * {
    margin-left: 1.618rem;
  }
}

.teammate-social img {
  height: 18px;
}

// Set an aspect ratio of 1:1 to obtain a squared div.
// [1] pseudo element's margin-top value relates to the parent's width,
//     creating a div as high as wide.
.teammate_hiring {
  align-self: flex-start;
  box-shadow: $image-shadow;
  position: relative;

  &::before {
    content: "";
    display: block;
    margin-top: 100%;
  }
}

// Center the content to its parent.
.teammate_hiring-content {
  align-items: center;
  bottom: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  left: 0;
  padding: 1.618rem;
  position: absolute;
  right: 0;
  top: 0;
}

.teammate_hiring-description {
  color: $light-grey;
  margin-top: 1rem;
  text-align: center;
}
